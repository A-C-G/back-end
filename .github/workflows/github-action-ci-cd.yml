name: CI/CD

#github action은 가상머신을 제공
#develop 브랜치에 push 됐을 때
on:
  push:
    branches:
      - main

#job 단위로 작업
jobs:
  build:
    runs-on: ubuntu-latest

    #github에서 코드 가져오기, with 하단의 부분은 submodule 불러오기 위함(액세스 토큰 필요)
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'
          cache: gradle

      - name: grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS CLI
        run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      #ec2에 github action 가상머신 ip 추가
      #ssh 관련 작업하기 위함
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2


      - name: Build with Gradle
        run: ./gradlew build

      #도커 허브에 이미지 배포
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/dev-repo:latest

      #ec2에 도커 이미지 실행
      - name: Connect ec2 and Run Docker Container
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            docker stop ACG-api
            docker rm ACG-api
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dev-repo
            docker run -d -p 8080:8080 --name ACG-api ${{ secrets.DOCKERHUB_USERNAME }}/dev-repo

      #ec2 시큐리티 그룹에서 github action ip 제거
      - name: Remove Github Actions IP from security group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
